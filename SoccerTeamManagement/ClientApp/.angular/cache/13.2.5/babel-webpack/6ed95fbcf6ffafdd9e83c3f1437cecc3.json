{"ast":null,"code":"import { ActivatedRoute, Router } from '@angular/router';\nimport { BaseService } from '../../../services/base.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../../../services/base.service\";\nexport let DetailsBaseComponent = /*#__PURE__*/(() => {\n  class DetailsBaseComponent {\n    //#endregion\n    constructor(entityName, navEndpoint, route, entityService, router) {\n      this.entityName = entityName;\n      this.navEndpoint = navEndpoint;\n      this.route = route;\n      this.entityService = entityService;\n      this.router = router;\n      this.errorMessage = '';\n      this.controls = {};\n      this.id = this._initializeId();\n      this.isCreateMode = this._intializeIsCreateMode(this.id);\n      this.isLoading = true;\n      this.isReadOnly = this._intializeIsReadOnly(this.id);\n      this.subscriptions = new Array();\n      this.title = this._setTitle(this.isCreateMode);\n    } //#region Life Cycle Hooks\n\n\n    ngOnDestroy() {\n      if (this.subscriptions) {\n        this.subscriptions.forEach(subscription => subscription.unsubscribe);\n      }\n    }\n\n    ngOnInit() {\n      this.form = this.initializeForm();\n\n      if (this.isCreateMode) {\n        this.isLoading = false;\n      } else {\n        this._disableForm();\n\n        this.getEntity();\n      }\n\n      this.controls = this.initializeControlReferences();\n    } //#endregion\n\n\n    debugInvalidControls() {\n      const invalid = [];\n      const controls = this.form.controls;\n\n      for (const name in controls) {\n        if (controls[name].invalid) {\n          console.log(\"INVALID CONTROL: \" + name);\n          invalid.push(name);\n        }\n      }\n\n      return invalid;\n    }\n\n    getEntity() {\n      this.subscriptions.push(this.entityService.getById(this.id).subscribe(data => {\n        this.form.patchValue(data);\n        this.isLoading = false;\n      }, error => this.errorMessage = error));\n    }\n\n    onReadonlyChange($event) {\n      if (!this.isCreateMode) {\n        if ($event.checked) {\n          this._disableForm();\n        } else {\n          this._enableForm();\n        }\n      } else {\n        this._enableForm();\n      }\n    }\n\n    onCreate(entity) {\n      this.subscriptions.push(this.entityService.create(entity).subscribe(data => this.router.navigate([this.navEndpoint]), error => this.errorMessage = error));\n    }\n\n    onUpdate(entity) {\n      this.subscriptions.push(this.entityService.update(entity).subscribe(data => this.router.navigate([this.navEndpoint]), error => this.errorMessage = error));\n    }\n\n    onSubmit() {\n      if (this.form.valid) {\n        const entity = this.form.value;\n\n        if (this.form.get('id').value < 1) {\n          this.onCreate(entity);\n        } else {\n          this.onUpdate(entity);\n        }\n      } else {\n        this.form.markAllAsTouched();\n      }\n    }\n\n    _disableForm() {\n      this.isReadOnly = true;\n      this.form.disable();\n    }\n\n    _enableForm() {\n      this.isReadOnly = false;\n      this.form.enable();\n    }\n\n    _initializeId() {\n      return +this.route.snapshot.paramMap.get('id');\n    }\n\n    _intializeIsCreateMode(id) {\n      return id && id > 0 ? this.isCreateMode = false : this.isCreateMode = true;\n    }\n\n    _intializeIsReadOnly(id) {\n      return id && id > 0 ? this.isReadOnly = true : this.isReadOnly = false;\n    }\n\n    _setTitle(isCreateMode) {\n      return (isCreateMode ? 'Create ' : 'Edit ') + this.entityName;\n    }\n\n  }\n\n  DetailsBaseComponent.ɵfac = function DetailsBaseComponent_Factory(t) {\n    return new (t || DetailsBaseComponent)(i0.ɵɵdirectiveInject(String), i0.ɵɵdirectiveInject(String), i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.BaseService), i0.ɵɵdirectiveInject(i1.Router));\n  };\n\n  DetailsBaseComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DetailsBaseComponent,\n    selectors: [[\"app-details-base\"]],\n    decls: 2,\n    vars: 0,\n    template: function DetailsBaseComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"details-base works!\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"\"]\n  });\n  return DetailsBaseComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}