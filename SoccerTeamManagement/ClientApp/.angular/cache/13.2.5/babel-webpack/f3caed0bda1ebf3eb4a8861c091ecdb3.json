{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport { Component, Inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Validators, FormBuilder } from '@angular/forms';\nimport { PlayerService } from '../../../../services/player.service';\nimport { CountryService } from '../../../../services/country.service';\nimport { StateService } from '../../../../services/state.service';\nimport { ImageService } from '../../../../services/image.service';\nlet PlayerDetailsComponent = class PlayerDetailsComponent {\n  //#endregion\n  //#region Constructor\n  constructor(route, router, http, baseUrl, formBuilder, playerService, countryService, stateService, imageService) {\n    this.route = route;\n    this.router = router;\n    this.http = http;\n    this.baseUrl = baseUrl;\n    this.formBuilder = formBuilder;\n    this.playerService = playerService;\n    this.countryService = countryService;\n    this.stateService = stateService;\n    this.imageService = imageService;\n    this.image = {}; //TODO: Create proper Image component\n\n    this.addressFormName = 'address';\n    this.subscriptions = new Array();\n    this.imageFile = null;\n    this.id = +this.route.snapshot.paramMap.get('id');\n    this.isLoading = true;\n\n    this._setFormMode();\n\n    this._buildForm();\n  } //#endregion\n  //#region Events\n\n\n  ngOnInit() {\n    if (!this.isCreateMode) {\n      this._disableForm();\n    }\n\n    if (this.isCreateMode) {\n      this.title = \"Create Player\";\n      this.isLoading = false;\n    } else {\n      this._getPlayer();\n    }\n\n    this._getCountries();\n\n    this._createControlReferences();\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.forEach(subscription => subscription.unsubscribe);\n    }\n  }\n\n  onFileSelected(event) {\n    this.imageFile = event.target.files[0];\n  }\n\n  onReadonlyChange($event) {\n    if (!this.isCreateMode) {\n      if ($event.checked) {\n        this._disableForm();\n        /*      this.form.get(this.addressFormName).disable();*/\n\n      } else {\n        this._enableForm();\n        /*      this.form.get(this.addressFormName).enable();*/\n\n      }\n    }\n\n    if (this.isCreateMode) {\n      this._enableForm();\n      /*      this.form.get(this.addressFormName).enable();*/\n\n    }\n  }\n\n  onCreate() {\n    console.log(\"onCreate\"); //this.subscriptions.push(this.playerService.create(this._getFormData())\n    //  .subscribe(\n    //    data => this.router.navigate(['/players']),\n    //    error => this.errorMessage = error as string));\n  }\n\n  onSubmit() {\n    console.log(\"HIT onSubmit\");\n\n    if (this.form.valid) {\n      console.log(\"HIT onSubmit -> form.valid\");\n\n      if (this.isCreateMode) {\n        console.log(\"HIT onSubmit -> form.valid -> CreateMode\");\n        this.onCreate();\n      } else {\n        console.log(\"HIT onSubmit -> form.valid -> UpdateMode\");\n        this.onUpdate();\n      }\n    } else {\n      console.log(\"HIT onSubmit -> form.invalid\");\n      this.form.markAsDirty;\n      this.form.markAsTouched;\n    }\n  }\n\n  onUpdate() {\n    console.log(\"onUpdate\"); //this.subscriptions.push(this.playerService.update(this._getFormData())\n    //  .subscribe(\n    //    data => this.router.navigate(['/players']),\n    //    error => this.errorMessage = error as string));\n  }\n\n  onImageUpload() {\n    this.subscriptions.push(this.imageService.create(this.image, this.imageFile).subscribe(data => this.image.id = data, error => this.errorMessage = error));\n  }\n\n  _onPlayerLoaded(player) {\n    this.title = \"Edit - \" + player.firstName + \" \" + player.lastName;\n    this.form.patchValue(player);\n    this.isLoading = false;\n  } //#endregion\n  //#region Methods\n\n\n  _buildForm() {\n    const unsignedInt999Pattern = new RegExp('^[1-9]\\\\d{0,2}$');\n    const unsignedIntPattern = new RegExp('^[1-9]\\\\d{0,8}$');\n    this.form = this.formBuilder.group({\n      firstName: ['', [Validators.required, Validators.maxLength(100)]],\n      lastName: ['', [Validators.required, Validators.maxLength(100)]],\n      nickName: ['', [Validators.maxLength(100)]],\n      height: ['', [Validators.min(0), Validators.max(999), Validators.pattern(unsignedInt999Pattern)]],\n      weight: ['', [Validators.min(0), Validators.max(9999), Validators.pattern(unsignedInt999Pattern)]],\n      foot: ['', [Validators.required]],\n      flareRating: ['', [Validators.required, Validators.min(1), Validators.max(5)]],\n      countryId: ['', [Validators.required]],\n\n      /*      readOnly: ['true'],*/\n      dateOfBirth: [new Date(), [Validators.required]],\n      phone: this.formBuilder.group({\n        countryCode: ['', [Validators.required, Validators.pattern(unsignedIntPattern)]],\n        areaCode: ['', [Validators.required, Validators.pattern(unsignedIntPattern)]],\n        extension: ['', [Validators.pattern(unsignedIntPattern)]],\n        number: ['', [Validators.required, Validators.pattern(unsignedIntPattern)]],\n        phoneType: ['', [Validators.required]]\n      })\n      /*//Photo\r\n      image: new FormControl('', Validators.required),\r\n      //Attributes\r\n      //Teams\r\n      teams: new FormControl('', Validators.required),\r\n      positions: new FormControl('', Validators.required),\r\n      parents: new FormControl('', Validators.required)*/\n\n    });\n  }\n\n  _createControlReferences() {\n    this.controls = {\n      firstName: this.form.get('firstName'),\n      lastName: this.form.get('lastName'),\n      nickName: this.form.get('nickName'),\n      height: this.form.get('height'),\n      weight: this.form.get('weight'),\n      foot: this.form.get('foot'),\n      flareRating: this.form.get('flareRating'),\n      countryId: this.form.get('countryId'),\n      readOnly: this.form.get('readOnly'),\n      dateOfBirth: this.form.get('dateOfBirth'),\n      phone: {\n        countryCode: this.form.controls.phone.get(\"countryCode\"),\n        areaCode: this.form.controls.phone.get(\"areaCode\"),\n        extension: this.form.controls.phone.get('extension'),\n        number: this.form.controls.phone.get('number'),\n        phoneType: this.form.controls.phone.get('phoneType')\n      } //address: {\n      //  addressLine1: this.form.controls.address.get(\"addressLine1\"),\n      //  addressLine2: this.form.controls.address.get(\"addressLine2\"),\n      //  city: this.form.controls.address.get(\"city\"),\n      //  countryId: this.form.controls.address.get(\"countryId\"),\n      //  stateId: this.form.controls.address.get(\"stateId\"),\n      //  zipCode: this.form.controls.address.get(\"zipCode\")\n      //}\n\n    };\n  }\n\n  _deleteImage() {\n    this.subscriptions.push(this.imageService.delete(+this.image.id).subscribe(data => data, error => this.errorMessage = error));\n  }\n\n  _disableForm() {\n    this.isReadonly = true;\n    this.form.disable(); //this.form.controls['readOnly'].enable();\n    //this.controls.readOnly.enable();\n  }\n\n  _enableForm() {\n    this.isReadonly = false;\n    this.form.enable();\n  }\n\n  _getCountries() {\n    if (!this.countries) {\n      this.subscriptions.push(this.countryService.getAll().subscribe(data => this.countries = data, error => this.errorMessage = error));\n    }\n  }\n\n  _getFormData() {\n    let player = {};\n    player = this.form.value;\n    player.id = this.id;\n    return player;\n  }\n\n  _getPlayer() {\n    this.subscriptions.push(this.playerService.getById(this.id).subscribe(data => this._onPlayerLoaded(data), error => this.errorMessage = error));\n  }\n\n  _setFormMode() {\n    if (this.id && this.id > 0) {\n      this.isCreateMode = false;\n      this.isReadonly = true;\n    } else {\n      this.isCreateMode = true;\n      this.isReadonly = false;\n    }\n  }\n\n};\nPlayerDetailsComponent = __decorate([Component({\n  selector: 'sm-player-details',\n  templateUrl: './player-details.component.html',\n  styleUrls: ['./player-details.component.scss']\n}), __param(3, Inject('BASE_URL')), __metadata(\"design:paramtypes\", [ActivatedRoute, Router, HttpClient, String, FormBuilder, PlayerService, CountryService, StateService, ImageService])], PlayerDetailsComponent);\nexport { PlayerDetailsComponent };","map":null,"metadata":{},"sourceType":"module"}