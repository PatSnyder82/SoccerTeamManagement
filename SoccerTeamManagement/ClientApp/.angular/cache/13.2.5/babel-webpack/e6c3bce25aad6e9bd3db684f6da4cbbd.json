{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar CheckboxComponent_1;\nimport { Component, ElementRef, Input, ViewChild } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nlet CheckboxComponent = CheckboxComponent_1 = class CheckboxComponent {\n  //#endregion\n  //#region Constructor\n  constructor() {\n    this._onChange = isChecked => {};\n\n    this._onTouched = () => {};\n\n    this.isChecked = false;\n    this.isDisabled = false;\n    this.isTouched = false;\n  } //#endregion\n  //#region ControlValueAccessor Implementation\n\n\n  writeValue(checked) {\n    this.isChecked = checked;\n  }\n\n  registerOnChange(onChange) {\n    this._onChange = onChange;\n  }\n\n  registerOnTouched(onTouched) {\n    this._onTouched = onTouched;\n  }\n\n  setDisabledState(isDisabled) {\n    this.isDisabled = isDisabled;\n  } //#endregion\n  //#region Events\n\n\n  onClick(isChecked) {\n    this._markAsTouched();\n\n    if (!this.isDisabled) {\n      this.isChecked = isChecked;\n\n      this._onChange(isChecked);\n    }\n  } //#endregion\n  //#region Methods\n\n\n  _markAsTouched() {\n    if (!this.isTouched) {\n      this._onTouched();\n\n      this.isTouched = true;\n    }\n  }\n\n};\n\n__decorate([ViewChild('checkbox', {\n  static: false\n}), __metadata(\"design:type\", ElementRef)], CheckboxComponent.prototype, \"checkBoxElementRef\", void 0);\n\n__decorate([Input('text'), __metadata(\"design:type\", String)], CheckboxComponent.prototype, \"text\", void 0);\n\n__decorate([Input('color'), __metadata(\"design:type\", String)], CheckboxComponent.prototype, \"color\", void 0);\n\nCheckboxComponent = CheckboxComponent_1 = __decorate([Component({\n  selector: 'sm-checkbox',\n  templateUrl: './checkbox.component.html',\n  styleUrls: ['./checkbox.component.scss'],\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    multi: true,\n    useExisting: CheckboxComponent_1\n  }]\n}), __metadata(\"design:paramtypes\", [])], CheckboxComponent);\nexport { CheckboxComponent };","map":null,"metadata":{},"sourceType":"module"}