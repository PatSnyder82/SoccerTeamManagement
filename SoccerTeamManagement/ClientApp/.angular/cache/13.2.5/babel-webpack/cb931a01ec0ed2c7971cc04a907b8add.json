{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { BaseService } from '../../../services/base.service';\nlet DetailsBaseComponent = class DetailsBaseComponent {\n  //#endregion\n  constructor(entityName, apiEndpoint, route, entityService, router) {\n    this.entityName = entityName;\n    this.apiEndpoint = apiEndpoint;\n    this.route = route;\n    this.entityService = entityService;\n    this.router = router;\n    this.isLoading = true;\n    this.subscriptions = new Array();\n    this.id = this._initializeId();\n    this.isCreateMode = this._intializeIsCreateMode();\n    this.isReadOnly = this._intializeIsReadOnly();\n    this.title = this._setTitle();\n    this.form = this.initializeForm();\n  } //#region Life Cycle Hooks\n\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.forEach(subscription => subscription.unsubscribe);\n    }\n  }\n\n  ngOnInit() {\n    if (!this.isCreateMode) {\n      this._disableForm();\n    }\n\n    if (this.isCreateMode) {\n      this.isLoading = false;\n    } else {\n      this.getEntity();\n    }\n\n    this.controls = this.initializeControlReferences();\n  } //protected abstract getEntity(): void;\n  //#endregion\n\n\n  debugInvalidControls() {\n    let invalid;\n    const controls = this.form.controls;\n\n    for (const name in controls) {\n      if (controls[name].invalid) {\n        console.log(\"INVALID CONTROL: \" + name);\n        invalid.push(name);\n      }\n    }\n\n    return invalid;\n  }\n\n  getEntity() {\n    this.subscriptions.push(this.entityService.getById(this.id).subscribe(data => {\n      this.form.patchValue(data);\n      this.isLoading = false;\n    }, error => this.errorMessage = error));\n  }\n\n  onReadonlyChange($event) {\n    if (!this.isCreateMode) {\n      if ($event.checked) {\n        this._disableForm();\n      } else {\n        this._enableForm();\n      }\n    } else {\n      this._enableForm();\n    }\n  }\n\n  onCreate() {\n    this.subscriptions.push(this.entityService.create(this._getFormData()).subscribe(data => this.router.navigate([this.entityName]), error => this.errorMessage = error));\n  }\n\n  onUpdate() {\n    this.subscriptions.push(this.entityService.update(this._getFormData()).subscribe(data => this.router.navigate([this.entityName]), error => this.errorMessage = error));\n  }\n\n  onSubmit() {\n    if (this.form.valid) {\n      if (this.isCreateMode) {\n        this.onCreate();\n      } else {\n        this.onUpdate();\n      }\n    } else {\n      this.form.markAllAsTouched();\n    }\n  }\n\n  _disableForm() {\n    this.isReadOnly = true;\n    this.form.disable();\n  }\n\n  _enableForm() {\n    this.isReadOnly = false;\n    this.form.enable();\n  }\n\n  _getFormData() {\n    let entity = {};\n    entity = this.form.value;\n    entity.id = this.id;\n    return entity;\n  }\n\n  _intializeApiEndPoint(endPoint) {\n    endPoint = endPoint.trim();\n\n    if (endPoint) {\n      if (endPoint[endPoint.length - 1] !== '/') {\n        endPoint += '/';\n      }\n    }\n  }\n\n  _initializeId() {\n    return +this.route.snapshot.paramMap.get('id');\n  }\n\n  _intializeIsCreateMode() {\n    return this.id && this.id > 0 ? this.isCreateMode = false : this.isCreateMode = true;\n  }\n\n  _intializeIsReadOnly() {\n    return this.id && this.id > 0 ? this.isReadOnly = true : this.isReadOnly = false;\n  }\n\n  _setTitle() {\n    return (this.isCreateMode ? 'Create ' : 'Edit ') + this.entityName;\n  }\n\n};\nDetailsBaseComponent = __decorate([Component({\n  selector: 'app-details-base',\n  templateUrl: './details-base.component.html',\n  styleUrls: ['./details-base.component.scss']\n}), __metadata(\"design:paramtypes\", [String, String, ActivatedRoute, BaseService, Router])], DetailsBaseComponent);\nexport { DetailsBaseComponent };","map":null,"metadata":{},"sourceType":"module"}