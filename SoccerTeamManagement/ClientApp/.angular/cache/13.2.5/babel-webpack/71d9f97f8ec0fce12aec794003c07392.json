{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { catchError } from 'rxjs';\nimport { BaseService } from './base.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common/http\";\nexport let TeamService = /*#__PURE__*/(() => {\n  class TeamService extends BaseService {\n    constructor(formBuilder, http, baseUrl) {\n      super(http, 'team/', baseUrl);\n      this.formBuilder = formBuilder;\n      this.baseUrl = baseUrl;\n    }\n\n    getByLeague(id) {\n      return this.http.get(this.url + 'getteambyleague/' + id.toString()).pipe(catchError(this.handleError));\n    }\n\n    getByClub(id) {\n      return this.http.get(this.url + 'getteambyclub/' + id.toString()).pipe(catchError(this.handleError));\n    }\n\n    getFormGroup() {\n      return this.formBuilder.group({//id: [0],\n        //teamLine1: ['', [Validators.required, Validators.maxLength(100)]],\n        //teamLine2: ['', [Validators.maxLength(100)]],\n        //city: ['', [Validators.required, Validators.maxLength(100)]],\n        //country: this.countryService.getFormGroup(),\n        //countryId: [null, [Validators.required]],\n        //countryText: [null],\n        //countryAlpha2Code: [null],\n        //state: this.stateService.getFormGroup(),\n        //stateId: [null],\n        //stateText: [null],\n        //stateAlpha2Code: [null],\n        //zipCode: ['', [Validators.pattern(unsignedIntPattern)]]\n      });\n    }\n\n    toTeams(teamPlayers) {\n      const teams = [];\n\n      if (teamPlayers) {\n        teamPlayers.forEach(teamPlayer => {\n          teams.push(this.toTeam(teamPlayer));\n        });\n      }\n\n      return teams;\n    }\n\n    toTeamPlayer(teamId, playerId, joined, departed = null) {\n      const teamPlayer = {};\n      teamPlayer.playerId = playerId;\n      teamPlayer.teamId = teamId;\n      teamPlayer.joinedTeam = joined;\n      teamPlayer.departedTeam = departed;\n      return teamPlayer;\n    }\n\n    toTeam(teamPlayer) {\n      return teamPlayer === null || teamPlayer === void 0 ? void 0 : teamPlayer.team;\n    }\n\n  }\n\n  TeamService.ɵfac = function TeamService_Factory(t) {\n    return new (t || TeamService)(i0.ɵɵinject(i1.FormBuilder), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject('BASE_URL'));\n  };\n\n  TeamService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TeamService,\n    factory: TeamService.ɵfac,\n    providedIn: 'root'\n  });\n  return TeamService;\n})();","map":null,"metadata":{},"sourceType":"module"}