{"ast":null,"code":"import { FormBuilder, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { CountryService } from '../../../../services/country.service';\nimport { StateService } from '../../../../services/state.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../../../../services/country.service\";\nimport * as i4 from \"../../../../services/state.service\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/material/select\";\nimport * as i9 from \"@angular/material/core\";\n\nfunction AddressModalComponent_mat_error_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\")(1, \"strong\");\n    i0.ɵɵtext(2, \"Input required \");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction AddressModalComponent_mat_error_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\")(1, \"strong\");\n    i0.ɵɵtext(2, \"Input must be less than 100 characters \");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction AddressModalComponent_mat_error_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\")(1, \"strong\");\n    i0.ɵɵtext(2, \"Input must be less than 100 characters \");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction AddressModalComponent_mat_option_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const country_r9 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", country_r9.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", country_r9.text, \" \");\n  }\n}\n\nfunction AddressModalComponent_mat_error_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\")(1, \"strong\");\n    i0.ɵɵtext(2, \"Input required\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction AddressModalComponent_section_23_mat_option_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const state_r12 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", state_r12.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", state_r12.text, \" \");\n  }\n}\n\nfunction AddressModalComponent_section_23_mat_error_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\")(1, \"strong\");\n    i0.ɵɵtext(2, \"Input required\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction AddressModalComponent_section_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"section\", 7)(1, \"mat-label\");\n    i0.ɵɵtext(2, \"State:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"mat-select\", 15);\n    i0.ɵɵtemplate(4, AddressModalComponent_section_23_mat_option_4_Template, 2, 2, \"mat-option\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, AddressModalComponent_section_23_mat_error_5_Template, 3, 0, \"mat-error\", 5);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r5.states);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.controls.stateId.hasError(\"required\"));\n  }\n}\n\nfunction AddressModalComponent_mat_error_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\")(1, \"strong\");\n    i0.ɵɵtext(2, \"Input required \");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction AddressModalComponent_mat_error_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\")(1, \"strong\");\n    i0.ɵɵtext(2, \"Input must be less than 100 characters \");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction AddressModalComponent_mat_error_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\")(1, \"strong\");\n    i0.ɵɵtext(2, \"Input must be a positive whole number less than 10 digits long \");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nexport let AddressModalComponent = /*#__PURE__*/(() => {\n  class AddressModalComponent {\n    //#endregion\n    //#region Constructor\n    constructor(dialogRef, data, formBuilder, countryService, stateService) {\n      this.dialogRef = dialogRef;\n      this.data = data;\n      this.formBuilder = formBuilder;\n      this.countryService = countryService;\n      this.stateService = stateService;\n      this.title = \"Address\";\n      this.subscriptions = new Array();\n    } //#endregion\n    //#region Events\n\n\n    ngOnDestroy() {\n      if (this.subscriptions) {\n        this.subscriptions.forEach(subscription => subscription.unsubscribe);\n      }\n    }\n\n    ngOnInit() {\n      this.form = this._buildForm();\n\n      this._getCountries();\n\n      this.controls = this._initializeControlReferences();\n\n      this._conditionalValidationOfState();\n    }\n\n    onCountryChange(countryId) {\n      if (countryId === 237 && this.states == null) {\n        this._getStates(countryId);\n      }\n    }\n\n    onNoClick() {\n      this.dialogRef.close();\n    } //#endregion\n    //#region Methods\n\n\n    _buildForm() {\n      const unsignedIntPattern = new RegExp('^[1-9]\\\\d{0,8}$');\n      return this.formBuilder.group({\n        addressLine1: ['', [Validators.required, Validators.maxLength(100)]],\n        addressLine2: ['', [Validators.maxLength(100)]],\n        city: ['', [Validators.required, Validators.maxLength(100)]],\n        countryId: [null, [Validators.required]],\n        stateId: [''],\n        zipCode: ['', [Validators.pattern(unsignedIntPattern)]]\n      });\n    }\n\n    _conditionalValidationOfState() {\n      this.subscriptions.push(this.controls.countryId.valueChanges.subscribe(value => {\n        if (value === 237) {\n          this.controls.stateId.setValidators([Validators.required]);\n        } else {\n          this.controls.stateId.clearValidators();\n        }\n\n        this.controls.stateId.updateValueAndValidity();\n      }));\n    }\n\n    _initializeControlReferences() {\n      return {\n        addressLine1: this.form.get('addressLine1'),\n        addressLine2: this.form.get('addressLine2'),\n        city: this.form.get('city'),\n        countryId: this.form.get('countryId'),\n        stateId: this.form.get('stateId'),\n        zipCode: this.form.get('zipCode')\n      };\n    }\n\n    _disableForm() {\n      this.form.disable();\n    }\n\n    _enableForm() {\n      this.form.enable();\n    }\n\n    _getCountries() {\n      if (!this.countries) {\n        this.subscriptions.push(this.countryService.getAll().subscribe(data => this.countries = data, error => this.errorMessage = error));\n      }\n    }\n\n    _getStates(countryId) {\n      if (!this.states) {\n        this.subscriptions.push(this.stateService.getByCountry(countryId).subscribe(data => this.states = data, error => this.errorMessage = error));\n      }\n    }\n\n  }\n\n  AddressModalComponent.ɵfac = function AddressModalComponent_Factory(t) {\n    return new (t || AddressModalComponent)(i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.CountryService), i0.ɵɵdirectiveInject(i4.StateService));\n  };\n\n  AddressModalComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddressModalComponent,\n    selectors: [[\"app-address-modal\"]],\n    inputs: {\n      countries: \"countries\"\n    },\n    decls: 37,\n    vars: 10,\n    consts: [[\"mat-dialog-title\", \"\"], [\"mat-dialog-content\", \"\"], [1, \"row\"], [1, \"form-group\"], [\"matInput\", \"\", \"formControlName\", \"addressLine1\", 1, \"form-control\"], [4, \"ngIf\"], [\"matInput\", \"\", \"formControlName\", \"addressLine2\", 1, \"form-control\"], [1, \"form-group\", \"col\"], [\"formControlName\", \"countryId\", 1, \"form-control\", 3, \"selectionChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"form-group col\", 4, \"ngIf\"], [\"matInput\", \"\", \"formControlName\", \"city\", 1, \"form-control\"], [\"matInput\", \"\", \"formControlName\", \"zipCode\", 1, \"form-control\"], [\"mat-dialog-actions\", \"\"], [3, \"value\"], [\"formControlName\", \"stateId\", 1, \"form-control\"]],\n    template: function AddressModalComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h1\", 0);\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 1)(3, \"div\", 2)(4, \"section\", 3)(5, \"mat-label\");\n        i0.ɵɵtext(6, \"Address Line 1:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 4);\n        i0.ɵɵtemplate(8, AddressModalComponent_mat_error_8_Template, 3, 0, \"mat-error\", 5);\n        i0.ɵɵtemplate(9, AddressModalComponent_mat_error_9_Template, 3, 0, \"mat-error\", 5);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(10, \"div\", 2)(11, \"section\", 3)(12, \"mat-label\");\n        i0.ɵɵtext(13, \"Address Line 2:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(14, \"input\", 6);\n        i0.ɵɵtemplate(15, AddressModalComponent_mat_error_15_Template, 3, 0, \"mat-error\", 5);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(16, \"div\", 2)(17, \"section\", 7)(18, \"mat-label\");\n        i0.ɵɵtext(19, \"Country:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"mat-select\", 8);\n        i0.ɵɵlistener(\"selectionChange\", function AddressModalComponent_Template_mat_select_selectionChange_20_listener($event) {\n          return ctx.onCountryChange($event.value);\n        });\n        i0.ɵɵtemplate(21, AddressModalComponent_mat_option_21_Template, 2, 2, \"mat-option\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(22, AddressModalComponent_mat_error_22_Template, 3, 0, \"mat-error\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(23, AddressModalComponent_section_23_Template, 6, 2, \"section\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"div\", 2)(25, \"section\", 7)(26, \"mat-label\");\n        i0.ɵɵtext(27, \"City:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(28, \"input\", 11);\n        i0.ɵɵtemplate(29, AddressModalComponent_mat_error_29_Template, 3, 0, \"mat-error\", 5);\n        i0.ɵɵtemplate(30, AddressModalComponent_mat_error_30_Template, 3, 0, \"mat-error\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(31, \"section\", 7)(32, \"mat-label\");\n        i0.ɵɵtext(33, \"Zip Code:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(34, \"input\", 12);\n        i0.ɵɵtemplate(35, AddressModalComponent_mat_error_35_Template, 3, 0, \"mat-error\", 5);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelement(36, \"div\", 13);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.title);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngIf\", ctx.controls.addressLine1.hasError(\"required\") && (ctx.controls.addressLine1.dirty || ctx.controls.addressLine1.touched));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.controls.addressLine1.hasError(\"maxlength\") && (ctx.controls.addressLine1.dirty || ctx.controls.addressLine1.touched));\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", ctx.controls.addressLine2.hasError(\"maxlength\") && (ctx.controls.addressLine2.dirty || ctx.controls.addressLine2.touched));\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngForOf\", ctx.countries);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.controls.countryId.hasError(\"required\") && (ctx.controls.countryId.dirty || ctx.controls.countryId.touched));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.controls.countryId.value === 237);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", ctx.controls.city.hasError(\"required\") && (ctx.controls.city.dirty || ctx.controls.city.touched));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.controls.city.hasError(\"maxlength\") && (ctx.controls.city.dirty || ctx.controls.city.touched));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.controls.zipCode.hasError(\"pattern\") && (ctx.controls.zipCode.dirty || ctx.controls.zipCode.touched));\n      }\n    },\n    directives: [i1.MatDialogTitle, i1.MatDialogContent, i5.MatLabel, i6.MatInput, i2.DefaultValueAccessor, i2.NgControlStatus, i2.FormControlName, i7.NgIf, i5.MatError, i8.MatSelect, i7.NgForOf, i9.MatOption, i1.MatDialogActions],\n    styles: [\"\"]\n  });\n  return AddressModalComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}