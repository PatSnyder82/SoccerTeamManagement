{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nlet DetailsBaseComponent = class DetailsBaseComponent {\n  //#endregion\n  constructor(entityName, entityNamePlural, route) {\n    this.entityName = entityName;\n    this.entityNamePlural = entityNamePlural;\n    this.route = route;\n    this.isLoading = true;\n    this.subscriptions = new Array();\n    this.id = this._initializeId();\n    this.isCreateMode = this._intializeIsCreateMode();\n    this.isReadOnly = this._intializeIsReadOnly();\n    this.title = this._setTitle();\n  } //#region Life Cycle Hooks\n\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.forEach(subscription => subscription.unsubscribe);\n    }\n  }\n\n  ngOnInit() {\n    if (!this.isCreateMode) {\n      this._disableForm();\n    }\n\n    if (this.isCreateMode) {\n      this.title = \"Create Player\";\n      this.isLoading = false;\n    } else {\n      this.getEntity();\n    }\n\n    this.setControlReferences();\n  } //#endregion\n\n\n  onReadonlyChange($event) {\n    if (!this.isCreateMode) {\n      if ($event.checked) {\n        this._disableForm();\n      } else {\n        this._enableForm();\n      }\n    } else {\n      this._enableForm();\n    }\n  }\n\n  _disableForm() {\n    this.isReadOnly = true;\n    this.form.disable();\n  }\n\n  _enableForm() {\n    this.isReadOnly = false;\n    this.form.enable();\n  }\n\n  _initializeId() {\n    return +this.route.snapshot.paramMap.get('id');\n  }\n\n  _intializeIsCreateMode() {\n    return this.id && this.id > 0 ? this.isCreateMode = false : this.isCreateMode = true;\n  }\n\n  _intializeIsReadOnly() {\n    return this.id && this.id > 0 ? this.isReadOnly = true : this.isReadOnly = false;\n  }\n\n  _setTitle() {\n    return (this.isCreateMode ? 'Create ' : 'Edit ') + this.entityName;\n  }\n\n};\nDetailsBaseComponent = __decorate([Component({\n  selector: 'app-details-base',\n  templateUrl: './details-base.component.html',\n  styleUrls: ['./details-base.component.scss']\n}), __metadata(\"design:paramtypes\", [String, String, ActivatedRoute])], DetailsBaseComponent);\nexport { DetailsBaseComponent };","map":null,"metadata":{},"sourceType":"module"}