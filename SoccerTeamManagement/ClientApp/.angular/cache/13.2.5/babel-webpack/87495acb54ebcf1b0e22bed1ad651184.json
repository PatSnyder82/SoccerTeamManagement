{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport { catchError } from 'rxjs/operators';\nimport { HttpClient } from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport { HttpParams } from '@angular/common/http';\nimport { Inject } from '@angular/core';\nimport { throwError } from 'rxjs'; //import 'rxjs/add/operator/do';\n//import 'rxjs/add/operator/map';\n\nlet BaseService = class BaseService {\n  constructor(http, endpoint, baseUrl) {\n    this.http = http;\n    this.baseUrl = baseUrl;\n    this.api = 'api/';\n    this.version = ''; //TODO: update backend API to include version 'v1/' in url path\n\n    this.endpoint = endpoint;\n    this.url = this.baseUrl + this.api + this.version + this.endpoint;\n    this.defaultPageIndex = 0;\n    this.defaultPageSize = 10;\n    this.defaultSortColumn = 'id';\n    this.defaultSortOrder = 'asc';\n    this.defaultFilterColumn = '';\n    this.defaultFilterQuery = '';\n  }\n\n  delete(id) {\n    return this.http.delete(this.url + id.toString()).pipe(catchError(this.handleError));\n  }\n\n  getById(id) {\n    return this.http.get(this.url + id.toString()).pipe(catchError(this.handleError));\n  }\n\n  getAll() {\n    const params = new HttpParams().set(\"pageSize\", '99999999');\n    return this.http.get(this.url, {\n      params\n    }).pipe(catchError(this.handleError));\n  }\n\n  getAllForTable(pageIndex = this.defaultPageIndex, pageSize = this.defaultPageSize, sortColumn = this.defaultSortColumn, sortOrder = this.defaultSortOrder, filterColumn = this.defaultFilterColumn, filterQuery = this.defaultFilterQuery) {\n    const params = new HttpParams().set(\"pageIndex\", pageIndex).set(\"pageSize\", pageSize).set(\"sortColumn\", sortColumn).set(\"sortOrder\", sortOrder).set(\"filterColumn\", filterColumn).set(\"filterQuery\", filterQuery);\n    return this.http.get(this.url, {\n      params\n    }).pipe(catchError(this.handleError));\n  }\n\n  update(item) {\n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/json; charset=utf-8');\n    return this.http.put(this.url, item, {\n      headers\n    }).pipe(catchError(this.handleError));\n  }\n\n  create(item) {\n    return this.http.post(this.url, item).pipe(catchError(this.handleError));\n  } // #region Protected Methods\n\n\n  handleError(err) {\n    return throwError(err.message || \"server error\");\n  }\n\n  isValidId(id) {\n    if (id && id > 0) {\n      return true;\n    }\n\n    return false;\n  }\n\n  urlOptionsHelper(url, options) {\n    let urlOptions = '';\n\n    if (options) {\n      for (const option of options) {\n        urlOptions = urlOptions + option + '/';\n      }\n    }\n\n    if (url.slice(-1) === '/') {\n      url = url + urlOptions;\n    } else {\n      url = url + '/' + urlOptions;\n    }\n\n    return url;\n  }\n\n};\nBaseService = __decorate([__param(2, Inject('BASE_URL')), __metadata(\"design:paramtypes\", [HttpClient, String, String])], BaseService);\nexport { BaseService };","map":null,"metadata":{},"sourceType":"module"}